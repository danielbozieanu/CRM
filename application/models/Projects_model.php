<?php
/*
 * Generated by CRUDigniter v2.3 Beta
 * www.crudigniter.com
 */

class Projects_model extends CI_Model
{

    private $primary_key='project_id';
    private $table_name='projects';
    private $users_projects_table = 'users_proiecte';

    function __construct()
    {
        parent::__construct();
    }

    /*
     * Get projects by id
     */
    function get_project($id)
    {
        return $this->db->get_where('projects',array('project_id'=>$id))->row_array();
    }

    /*
     * Get developers assigned to the project
     */
    function get_developers($projectId){
        $this->db->select('*');
        $this->db->from('users_proiecte');
        $this->db->join('projects', 'project_id = id_proiect');
        $this->db->where('project_id', $projectId);
        return $this->db->get();
    }


    /*
     * Get all projects
     */
    function get_all_projects($limit=5, $offset=0, $order_column='', $order_type='asc')
    {
//        return $this->db->get('projects')->result_array();

        if(empty($order_column)||empty($order_type)){
            $this->db->order_by($this->primary_key,'asc');
        }else {
            $this->db->select('*');
            $this->db->from($this->table_name);
            $this->db->order_by($order_column,$order_type);
            $this->db->limit($limit, $offset);
            return $this->db->get();
        }
    }

    /*
     * Get all done projects
     */
    function get_all_projects_done()
    {
        $this->db->select('*');
        $this->db->from('projects');
        $this->db->where('project_status', 1);
        return $this->db->get()->result_array();
    }

    /*
     * Get all project no pagination
     */
    function get_all_projects_nd()
    {
        return $this->db->get('projects')->result_array();
    }

    /*
     * Count all
     */
    function count_all(){
        return $this->db->count_all($this->table_name);
    }

    /*
     * function to add new projects
     */
    function add_projects($params, $developerParam)
    {
        $this->db->insert('projects',$params);

        //Get the id of the project
        $insert_id = $this->db->insert_id();

        //Insert developer and project
           $this->db->insert('users_proiecte', array(
               'id_user' => $developerParam,
               'id_proiect' => $insert_id
           ));


        return $insert_id;
    }

    /*
     * function to update projects
     */
    function update_projects($id,$params)
    {
        $this->db->where('project_id',$id);
        $response = $this->db->update('projects',$params);
        if($response)
        {
            return "projects updated successfully";
        }
        else
        {
            return "Error occuring while updating projects";
        }
    }

    /*
     * function to delete projects
     */
    function delete_projects($id)
    {
        //Delete association from users_projects
//

        $response = $this->db->delete('projects',array('project_id'=>$id));
        if($response)
        {
            return "projects deleted successfully";
        }
        else
        {
            return "Error occuring while deleting projects";
        }
    }

    /*
     * Get the client of project.
     */
    function getClients(){
        $this->db->select('*');
        $this->db->from('clienti');
        $this->db->join('projects', 'projects.client = clienti.id_client');
        $query = $this->db->get();

        return $query;
    }

    /*
     * Get the developers.
     */
    function getDevelopers(){
        $this->db->select('first_name, users.id');
        $this->db->from('users');
        $this->db->join('users_groups', 'user_id = users.id');
        $this->db->where('group_id', 5);
        $query = $this->db->get();

        return $query->result_array();
    }


    /*
     * Unassing answers to project
     */
    function unassign_questions($projectId){
        $this->db->delete('questions_project', array(
            'question_project'    => $projectId,
        ));
    }

    /*
     * Add reminder
     */
    function add_reminder($projectId){

        $params = array(
            'project' => $projectId,
            'created' => date('Y-m-d')
        );

        $this->db->insert('reminders', $params);
    }

    /*
     * Get reminder
     */
    function get_reminder($projectId){
        $this->db->select('*');
        $this->db->from('reminders');
        $this->db->where('reminders.project', $projectId);

        return $this->db->get()->row();
    }

    /*
     * Update reminder
     */
    function update_reminder($projectId, $count){

        $this->db->where('project', $projectId);
        $this->db->set('count', $count);
        $this->db->update('reminders');
    }
}
