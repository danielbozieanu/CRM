<?php
/*
 * Generated by CRUDigniter v2.3 Beta
 * www.crudigniter.com
 */

class Form extends MY_Controller
{
    function __construct()
    {
        parent::__construct();
        $this->data['page_title'] = 'CRM LOW - Forms';
        $this->data['page_description'] = 'Forms administration';
        $this->load->model('Form_model');
    }

    /*
     * Listing of forms
     */
    function index()
    {
        if (!$this->ion_auth->logged_in())
        {
            // redirect them to the login page
            redirect('user/login', 'refresh');
        } else {
            $this->data['forms'] = $this->Form_model->get_all_forms();

            $this->load->model('Projects_model');

            $this->render('auth/forms');
        }
    }

    /*
     * Adding a new form
     */
    function add()
    {
        if (!$this->ion_auth->logged_in())
        {
            // redirect them to the login page
            redirect('user/login', 'refresh');
        } else {
            $this->load->library('form_validation');

            $this->form_validation->set_rules('question[]', 'Questions', 'required');
            $this->form_validation->set_rules('qType[]', 'Question type', 'required');
            $this->form_validation->set_rules('answers[]', 'Answers', 'required');

            if ($this->form_validation->run() && $this->ion_auth->is_admin()) {
                $this->load->helper('string');


                $questionsInput = $this->input->post('question');
                $answersInput = $this->input->post('answers');
                $questionType = $this->input->post('qType');
                $answersScore = $this->input->post('answersScore');
                $questionsScore = $this->input->post('qidScore');


                //Question id for answer
                $qId = $this->input->post('qid');

                //Question id for question type
                $qTypeFor = $this->input->post('qTypeId');


                //Put questions to array
                $questionsParam = array();
                foreach ($questionsInput as $item) {
                    array_push($questionsParam, $item);
                }
                //Put answers to array
                $answersParam = array();
                foreach ($answersInput as $item) {
                    array_push($answersParam, $item);
                }
                //Put answers numbers to array
                $qIdParam = array();
                foreach ($qId as $item) {
                    array_push($qIdParam, $item);
                }

                //Put question ids for types to array
                $qTypeIdParam = array();
                foreach ($qTypeFor as $item) {
                    array_push($qTypeIdParam, $item);
                }

                //Put question types to array
                $qTypeParam = array();
                foreach ($questionType as $item) {
                    array_push($qTypeParam, $item);
                }

                $params = array(
                    'form_name' => $this->input->post('form_name'),
                    'form_created' => date('Y-m-d'),
                );

                $form_id = $this->Form_model->add_form($params, $questionsParam, $answersParam, $qIdParam, $qTypeParam, $answersScore, $questionsScore);

                redirect('form/edit/'.$form_id);
            } else {

                $this->load->model('Projects_model');
                $this->data['all_done_projects'] = $this->Projects_model->get_all_projects_done();

                $this->render('auth/forms_add');
            }
        }
    }

    /*
     * Editing a form
     */
    function edit($form_id)
    {
        if (!$this->ion_auth->logged_in())
        {
            // redirect them to the login page
            redirect('user/login', 'refresh');
        } else {
            // check if the form exists before trying to edit it
            $form = $this->Form_model->get_form($form_id);

            if (isset($form['form_id']) && $this->ion_auth->is_admin()) {
                $this->load->library('form_validation');

                $this->form_validation->set_rules('form_name', 'Form Name', 'required');

                if ($this->form_validation->run()) {

                    //Updated questions
                    $newQuestions = $this->input->post('question');
                    $newQuestionsId = $this->input->post('qId');

                    //Updated answers
                    $newAnswers = $this->input->post('answers');
                    $newAnswersQuestionId = $this->input->post('qIdAns');
                    $newAnswersId = $this->input->post('ansId');

                    //Updated type
                    $newQuestionType = $this->input->post('qType');
                    $newQuestionIdType = $this->input->post('qIdType');

                    $this->load->model('Question_model');
                    $this->Question_model->update_question($newQuestionsId, $newQuestions, $newQuestionType);
                    $this->Question_model->update_answers($newAnswersId, $newAnswersQuestionId, $newAnswers);

                    //=========================================
                        //NEW QUESTIONS
                    //==========================================

                    $questionsInput = $this->input->post('newQuestion');
                    $answersInput = $this->input->post('newAnswers');
                    $questionType = $this->input->post('newqType');


                    //Question id for answer
                    $qId = $this->input->post('newqid');

                    if (count($questionsInput)>0 && count($questionType)>0){


                            $form_id = $this->Form_model-> add_questions($form['form_id'], $questionsInput, $answersInput, $qId, $questionType);

                redirect('form/edit/'.$form['form_id']);
                    }

                    $params = array(
                        'form_name' => $this->input->post('form_name'),
                    );

                    $this->Form_model->update_form($form_id, $params);
                    redirect('form/index');
                } else {
                    $this->data['form'] = $this->Form_model->get_form($form_id);

                    //Get all projects for select option
                    $this->load->model('Projects_model');
                    $this->data['all_done_projects'] = $this->Projects_model->get_all_projects_done();

                    //Get all form questions
                    $this->load->model('Question_model');
                    $this->data['all_questions'] = $this->Question_model->get_all_questions($form_id);

                    $this->data['all_answers'] = $this->Question_model->get_answers();


                    $this->render('auth/forms_edit');
                }
            } else
                show_error('The form you are trying to edit does not exist.');
        }
    }

    /*
     * Deleting form
     */
    function remove($form_id)
    {
        if (!$this->ion_auth->logged_in())
        {
            // redirect them to the login page
            redirect('user/login', 'refresh');
        } else {
            $form = $this->Form_model->get_form($form_id);

            // check if the form exists before trying to delete it
            if (isset($form['form_id'])) {
                $this->Form_model->delete_form($form_id);
                redirect('form/index');
            } else
                show_error('The form you are trying to delete does not exist.');
        }
    }

    /*
     * Deleting question
     */
    function delete_question($id)
    {
        $this->Form_model->delete_question($id);

        redirect($_SERVER['HTTP_REFERER']);
    }

    /*
     * Delete answer
     */
    function delete_answer($answerId, $questionId){
        $this->Form_model->delete_answer($answerId, $questionId);

        redirect($_SERVER['HTTP_REFERER']);
    }

    /*
     * Render page
     */

    protected function render($the_view = NULL, $template = 'master')
    {
        parent::render($the_view, $template);
    }

}
