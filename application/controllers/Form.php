<?php
/*
 * Generated by CRUDigniter v2.3 Beta
 * www.crudigniter.com
 */

class Form extends MY_Controller
{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Form_model');
    }

    /*
     * Listing of forms
     */
    function index()
    {
        $this->data['forms'] = $this->Form_model->get_all_forms();

        $this->render('auth/forms');
    }

    /*
     * Adding a new form
     */
    function add()
    {

        //Put developers to array
//        $developersParam = array();
//        foreach ( $developersInput as $item ){
//            array_push($developersParam, $item);
//        }


        $this->load->library('form_validation');

        $this->form_validation->set_rules('form_project','Form Project','required');

        if($this->form_validation->run())
        {

            $questionsInput = $this->input->post('question');
            $answersInput = $this->input->post('answers');
            $answersNumber = $this->input->post('questiondNumber');


            //Put questions to array
            $questionsParam = array();
            foreach ( $questionsInput as $item ){
                array_push($questionsParam, $item);
            }
            //Put answers to array
            $answersParam = array();
            foreach ( $answersInput as $item ){
                array_push($answersParam, $item);
            }
            //Put answers numbers to array
            $numberParam = array();
            foreach ( $answersNumber as $item ){
                array_push($numberParam, $item);
            }


            $params = array(
                'form_name' => $this->input->post('form_name'),
                'form_project' => $this->input->post('form_project'),
                'form_created' => date('Y-m-d'),
            );

            $form_id = $this->Form_model->add_form($params,$questionsParam, $answersParam, $numberParam);
            redirect('form');
        }
        else
        {

            $this->load->model('Projects_model');
            $this->data['all_projects'] = $this->Projects_model->get_all_projects_nd();

            $this->render('auth/forms_add');
        }
    }

    /*
     * Editing a form
     */
    function edit($form_id)
    {
        // check if the form exists before trying to edit it
        $form = $this->Form_model->get_form($form_id);

        if(isset($form['form_id']))
        {
            $this->load->library('form_validation');

            $this->form_validation->set_rules('form_project','Form Project','required');

            if($this->form_validation->run())
            {
                $params = array(
                    'form_name' => $this->input->post('form_name'),
                    'form_project' => $this->input->post('form_project'),
                );

                $this->Form_model->update_form($form_id,$params);
                redirect('form/index');
            }
            else
            {
                $data['form'] = $this->Form_model->get_form($form_id);

                $this->load->model('Projects_model');
                $data['all_projects'] = $this->Projects_model->get_all_projects_nd();

                $this->load->view('form/edit',$data);
            }
        }
        else
            show_error('The form you are trying to edit does not exist.');
    }

    /*
     * Deleting form
     */
    function remove($form_id)
    {
        $form = $this->Form_model->get_form($form_id);

        // check if the form exists before trying to delete it
        if(isset($form['form_id']))
        {
            $this->Form_model->delete_form($form_id);
            redirect('form/index');
        }
        else
            show_error('The form you are trying to delete does not exist.');
    }

    /*
     * Render page
     */

    protected function render($the_view = NULL, $template = 'master')
    {
        parent::render($the_view, $template);
    }

}
